aka.ms/premiereducation
https://whatpixel.com/10-best-powershell-books/
https://www.d.umn.edu/~gshute/softeng/object-oriented.html
v3 Jeffrey Snover (creator of PS) & Jason Helmick - https://channel9.msdn.com/Series/GetStartedPowerShell3

Sample PDF for Book Recommended by Trainer : https://manning-content.s3.amazonaws.com/download/c/f6b304a-bc0f-4a6f-bf37-d3e17745ad0b/PStoolmakingsamplech20.pdf
Official Free Resources : https://powershell.org/free-resources/

*** Ctrl + J : Pre-Defined Template Call List PopUp in ISE

Measure-Command {}
Get-Command // Shows all Loaded & Unloaded PS-Only Commands (DOS not incl)
Get-Command -ListImported // From Loaded Modules
Get-Command * // Shows all availabe within system incl DOS.
Get-Help about_ (General Topics)

Set-Alias // To change Existing Alias
Get-Verb : List of Approved Verbs

$Profile | Select *
$Profile

Read-Host // scanf
Write-Host // printf

New-PSSession only to save. Save and use via Invoke. When you want to work with multiple machines at a time.
Enter/Exit-PSSession to create a temporary session which does not get saved.

Clear-Variable Error // No Dollar
$Variable:a // Print Current Value

$_ or $psitem is Current Pipeline Object
Boolean Values do not need an =$true as that is default query.

DAY 1 (Modules 2 > 6 > 3 > 7) Functions/Commands, Help System, Pipeline & Object Models
----------------------------------------------------------------------------------------------------------------------------------------
Backtick (`) used to continue one command into the next line.
Set-Location ~ > PWD changes to Current Profile Home

$PSVersionTable
$env:PSModulePath -Split ";"
$env:COMPUTERNAME

#psm1 file extension is for Modules (Container for Commands)

Get-Command -Noun *net*
Get-Command -Verb *get*

Get-Module

Get-Help Get-ChildItem -ShowWindow
Get-Help Get-NetIPConfiguration -Parameter All
Get-Help Get-ChildItem -Online #Online Technet Article

Get-Help Sort-Object -Parameter Descending #Describes DESC function

Get-Command -Noun Alias
Get-Command *Alias
Get-Command New-Alias -Syntax
Get-Command Get-ChildItem -Syntax

New-Alias Child2 Get-ChildItem 
Get-Alias | findstr Child2

$profile
$profile | Select * #All Profiles (ISE or PS : C:\Users\prudentia\Documents\WindowsPowerShell\profile.ps1)

#Write-Host "User: $env:USERNAME"
#Use Transcript to record commands being run.

Set-ExecutionPolicy Unrestricted -Scope LocalMachine

Get-Command *transcript
Start-Transcript -Path $home\Desktop\TranscriptTest.txt -Append
Stop-Transcript

#Control Mechs // Risk Mitigation : WhatIf & Confirm

dir Variable:\WhatIfPreference
$WhatIfPreference=$true

Stop-Process -name c* -WhatIf
Stop-Process -name c* -WhatIf:$true
Stop-Process -name c* -Confirm #Confirm Manually For Each Process

$ConfirmPreference

#For running in the background
Restart-Computer Machine1 -Confirm:$false

Update-Help -Verbose -Force -SourcePath C:\PowerShell-Help
?? - Get-Childitem $PSHome -Filter *helpinfo.xml -Recurse | Remove-Item Confirm:$false
Get-Help Get-Process -Full
Get-Help Get-NetAdapter -Examples
Get-Help about_Updatable_Help
Get-Help Save-Help -Examples

New-Item -Path C:\TheHelpFiles –ItemType Directory
Get-Module -ListAvailable | Format-Table Name, HelpInfoURI
Save-Help -Verbose -Force -DestinationPath C:\TheHelpFiles #Offline Dump of Existing Help Data

Update-Help -Verbose #Delay between two update calls is 24 hrs.
Update-Help -Verbose -Force

#GREP
ipconfig /all | Select-String -Pattern ‘Ipv4 Address’

Get-Process -Id $pid -Module
Get-Process -Id $pid -Verbose
#F7
Get-History
#GUI Fill & Exec
Show-Command Get-Process 

Show-Command Get-Process -PassThru -Outvariable result #Click OK on the Popup; PassThru is key.
$result | Invoke-Expression

Get-Process -Id $pid -Module

$a=1
$a.GetType()
$svc = Get-Service Spooler
$svc.GetType
$svc.GetHashCode()

$svc | select *
$svc.RequiredServices
(Get-Service Spooler).RequiredServices
$svc.Start()
$svc.StartType

#List All Props & Meths
$svc | Get-Member

(Get-Date).Date | Get-Member
(Get-Date).Date.Month | Get-Member
 
(Get-Date).ToShortDateString()

Get-Culture

Get-ChildItem -File
Get-ChildItem -Directory

Get-ChildItem -Path .. -File | where LastWriteTime -lt (Get-Date).AddDays(-30) | Remove-Item -WhatIf

Get-ChildItem | Get-Member #Lists for ALL Object Types - In this case for Directories as well as File

"spooler", "bits" | Get-Service
Get-Content <File> | Get-Service | where StartType -eq manual
Get-Content <File> | Get-Service

$var = Get-Content <File>
$var = Get-Content <File> | Get-Service | where StartType -eq manual
$var[0] #Picking Up First Entry from the Variable

#Specifics (Get-Content will not consider comma as a delimiter; default is \n)
Import-CSV

$gc= Get-Content <file>
$gc[0]
$gc= Get-Content <file> -Delimiter " " #Still doesn't treat dataset as a table, the break is translated as a new line.

$csv= Import-Csv <file>
$csv[0]
$csv= Import-Csv <file> -Delimiter ":" #Explicitly define Delimiter

## Functions/Processes for Input i.e. Verb-Noun cmdlets. ##
(Select, Sort, Group, Measure, Compare, Where, Foreach, etc)

Get-Service | Select-Object StartType, Name, Status, DisplayName -First 5 #Reminder : Know Props via Get-Member
Get-Process | Sort CPU -Descending | Select -First 5
Get-EventLog -LogName Application | Select -Last 5

#Logical Disk
Get-Volume | Sort-Object –Property SizeRemaining

#Grouping
Get-EventLog -LogName Application | Group-Object EntryType
Get-Service | Group Status

#Check Difference in Output by running the following
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error" | Select -ExpandProperty Group | Select -First 5
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error"  | Select -First 5

#Newest (Only in some cmdlets)
Get-EventLog -LogName Application -EntryType Error -Newest 10

#Measure
Get-ChildItem -Path . -File | Measure -Property Length -Sum -Average -Maximum -Minimum
Get-Process | Measure -Property CPU -Sum -Average -Maximum -Minimum

#Compare <= == =>
$Proc1 = Get-Process
start notepad.exe
calc
$Proc2 = Get-Process
Compare $Proc1 $Proc2
Compare $Proc1 $Proc2 -IncludeEqual -ExcludeDifferent

#Actual
Compare-Object -ReferenceObject $Proc1 -DifferenceObject $Proc2

#Where
Get-EventLog Application -Newest 10 | Where-Object {$_.Source -eq "esent" -and $_.TimeGenerated -gt (Get-Date).AddDays(-1)}
#$_ is Pipeline Variable (i.e. acts on output objects of the current command)

** Question Mark (?) is Alias for Where or Where-Object
** Percentage (%) is Alias for ForEach or ForEach-Object

Get-Process | Where CPU -gt 100 (Won't work till PS3)
Ideal one,
Get-Process | Where-Object {$_.CPU -gt 100}
Get-Process | Where-Object {$_.CPU -gt 100 -and $_.NonpagedSystemMemorySize -gt 10kb} #By default values are in Bytes

PS C:\Windows\system32> ((gci -File).length)/1024
4.009765625
PS C:\Windows\system32> ((gci -File).length)/1KB
4.009765625
PS C:\Windows\system32> ((gci -File).length)/1024/1024
0.00391578674316406
PS C:\Windows\system32> ((gci -File).length)/1MB
0.00391578674316406

#ForEach
Get-Service s* | Where Status -eq "Running" | ForEach {Write-Host "Service" $_.DisplayName "is running"}

Get-SmbShare | Sort-Object –Property Description # CMD : net share
Get-Process | Select-Object -Unique #Useful

#Correct Logically
Get-Process | Sort CPU -Descending | Select -First 5
#Incorrect Logically
Get-Process | Select -First 5 | Sort CPU -Descending

##Output
Out-File (Sends only whatever is on screen)
Export-CSV (Sends all properties regardless of what is printed on screen; similar to Select *. Also lists Object Type Information. Use -NoTypeInformation or -nti to avoid that.)
Export-Clixml

Get-Process | Select -First 5 | Sort CPU -Descending | Export-Csv .\test.csv -NoTypeInformation
Get-Process | Select -First 5 | Sort CPU -Descending | Out-File .\test.txt

Get-Command -Verb Out
Cmdlet          Out-Default                                        3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-File                                           3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-Host                                           3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-Null                                           3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-Printer                                        3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-String                                         3.1.0.0    Microsoft.PowerShell.Utility 

Out-Null

-NoClobber basically doesn't fill in duplicate data while appending.

Get-Process | Select -First 5 | Sort CPU -Descending | Out-GridView -PassThru
#PassThru provides OK & Cancel options to be printed back to screen based on whatever the end user has selected.

----------------------------------------------------------------------------------------------------------------------------------------
Export -Csv
       -Clixml

Out    -Default (is default)
       -File
       -Gridview
       -Host
       -Null (Use this to destroy value)
       -String (Cannot be converted back into an Object)
       -Printer
       
Format -Table
       -List
       -Wide
----------------------------------------------------------------------------------------------------------------------------------------

#Formatting (List/Table)
#Instead of Select * | FL, FL * can be used.

***** FL or FT should always be the last part of the pipeline and only to view on the screen.
Reason being these two convert data into strings i.e. without object property.

#Wrap
| FT -Wrap to remove the dot-dot-dots or Incomplete Output Data
For Outputs where one Column has longer values (eg. Path), keep it to the right otherwise some of the 

Get-Alias | Format-Wide -Autosize (Minimalistic)

Get-Process | Sort-Object -Property BasePriority | Format-Table -GroupBy BasePriority -Wrap -AutoSize
Get-Process | Sort-Object -Property BasePriority -Descending | Format-Table -GroupBy BasePriority -Wrap -AutoSize #With DESC

Get-Process | Sort-Object -Property Status | Format-Table -GroupBy Status -Wrap -AutoSize #Useful
Get-ACL Test.txt -Audit | Export-Clixml Text.xml #Useful
Example Output,
----------------------------------------------------------------------------------------------------------------------------------------
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>System.Security.AccessControl.FileSecurity</T>
      <T>System.Security.AccessControl.FileSystemSecurity</T>
      <T>System.Security.AccessControl.NativeObjectSecurity</T>
      <T>System.Security.AccessControl.CommonObjectSecurity</T>
      <T>System.Security.AccessControl.ObjectSecurity</T>
      <T>System.Object</T>
    </TN>
    <ToString>System.Security.AccessControl.FileSecurity</ToString>
    <Props>
      <S N="AccessRightType">System.Security.AccessControl.FileSystemRights</S>
      <S N="AccessRuleType">System.Security.AccessControl.FileSystemAccessRule</S>
      <S N="AuditRuleType">System.Security.AccessControl.FileSystemAuditRule</S>
      <B N="AreAccessRulesProtected">false</B>
      <B N="AreAuditRulesProtected">false</B>
      <B N="AreAccessRulesCanonical">true</B>
      <B N="AreAuditRulesCanonical">true</B>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop\Test.txt</S>
      <S N="PSParentPath">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop</S>
      <S N="PSChildName">Test.txt</S>
      <Obj N="PSDrive" RefId="1">
        <TN RefId="1">
          <T>System.Management.Automation.PSDriveInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>C</ToString>
        <Props>
          <S N="CurrentLocation">Users\prudentia\Desktop</S>
          <S N="Name">C</S>
          <S N="Provider">Microsoft.PowerShell.Core\FileSystem</S>
          <S N="Root">C:\</S>
          <S N="Description"></S>
          <Nil N="MaximumSize" />
          <Obj N="Credential" RefId="2">
            <TN RefId="2">
              <T>System.Management.Automation.PSCredential</T>
              <T>System.Object</T>
            </TN>
            <ToString>System.Management.Automation.PSCredential</ToString>
            <Props>
              <Nil N="UserName" />
              <Nil N="Password" />
            </Props>
          </Obj>
          <Nil N="DisplayRoot" />
        </Props>
        <MS>
          <U64 N="Used">36568629248</U64>
          <U64 N="Free">463012818944</U64>
        </MS>
      </Obj>
      <Obj N="PSProvider" RefId="3">
        <TN RefId="3">
          <T>System.Management.Automation.ProviderInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>Microsoft.PowerShell.Core\FileSystem</ToString>
        <Props>
          <S N="ImplementingType">Microsoft.PowerShell.Commands.FileSystemProvider</S>
          <S N="HelpFile">System.Management.Automation.dll-Help.xml</S>
          <S N="Name">FileSystem</S>
          <S N="PSSnapIn">Microsoft.PowerShell.Core</S>
          <S N="ModuleName">Microsoft.PowerShell.Core</S>
          <Nil N="Module" />
          <S N="Description"></S>
          <S N="Capabilities">Filter, ShouldProcess, Credentials</S>
          <S N="Home">C:\Users\prudentia</S>
          <Obj N="Drives" RefId="4">
            <TN RefId="4">
              <T>System.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSDriveInfo, System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <LST>
              <Ref RefId="1" />
            </LST>
          </Obj>
        </Props>
      </Obj>
      <Obj N="Audit" RefId="5">
        <TN RefId="5">
          <T>System.Security.AccessControl.AuthorizationRuleCollection</T>
          <T>System.Collections.ReadOnlyCollectionBase</T>
          <T>System.Object</T>
        </TN>
        <IE />
        <Props>
          <I32 N="Count">0</I32>
          <S N="SyncRoot">System.Object</S>
          <B N="IsSynchronized">false</B>
        </Props>
      </Obj>
      <Nil N="CentralAccessPolicyId" />
      <Nil N="CentralAccessPolicyName" />
      <S N="Path">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop\Test.txt</S>
      <S N="Owner">DESKTOP-NOMDDPJ\prudentia</S>
      <S N="Group">DESKTOP-NOMDDPJ\None</S>
      <Obj N="Access" RefId="6">
        <TNRef RefId="5" />
        <IE>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
        </IE>
      </Obj>
      <S N="Sddl">O:S-1-5-21-1304635577-3799697455-2161510296-1003G:S-1-5-21-1304635577-3799697455-2161510296-513D:(A;;FA;;;SY)(A;;FA;;;BA)(A;;FA;;;S-1-5-21-1304635577-3799697455-2161510296-1003)</S>
      <S N="AccessToString">NT AUTHORITY\SYSTEM Allow  FullControl_x000A_BUILTIN\Administrators Allow  FullControl_x000A_DESKTOP-NOMDDPJ\prudentia Allow  FullControl</S>
      <S N="AuditToString"></S>
    </MS>
  </Obj>
</Objs>
----------------------------------------------------------------------------------------------------------------------------------------
DAY 2 (Modules 4 > 8 > 12 > 11) - Functions/Commands, Operators, Variables & Data Types
----------------------------------------------------------------------------------------------------------------------------------------

'This is a simple string' -match '^T\w+'
'This is a simple string' -match '(^T\w+)(.+)'
$Matches
$Matches[0]

9 –eq 9
‘SErver’ –cgt ‘Server’
(1,10,2,10 -eq 10).Count
'xbox' –ieq 'XBOX'
1,2,3,4,5,6,7,8,9,10 –Contains 3
'Sales' –In 'Marketing','IT','Sales','Finance','HR'

(Get-ChildItem C:\Windows).FullName
(Get-Process | Select-Object -ExpandProperty processName) -contains 'lsass'
( (Get-Acl C:\Windows).Access | Select-Object -ExpandProperty IdentityReference)
(Get-HotFix | Select-Object -ExpandProperty HotfixID)
(Get-WindowsOptionalFeature -Online | Select-Object -ExpandProperty FeatureName)

1,2,3,4,5 -contains 2 -xor 5,6,7,8,9 -contains 8

(Get-Date).IsDaylightSavingTime()
-not (Get-Date).IsDaylightSavingTime()

#Defining A Function

Function Top-Process
{
Param ([int]$num=5, $server=".")
Get-Process -ComputerName $server | Sort CPU -Descending | Select -First $num
}

Top-Process -server . -num 8

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName                                                                
-------  ------    -----      ----- -----   ------     -- -----------                                                                
    486      62   119492      84552 ...83   552.67   1936 MsMpEng                                                                    
    852      75   254816     226500  1026   374.25   4468 powershell_ise                                                             
    363      37    79204      93976 ...33   185.86   2176 chrome                                                                     
   1079       0      252      26148    67   181.36      4 System                                                                     
   1480      58    59292     109664 ...08   131.09    936 chrome                                                                     
   1757      62    18864      46936 ...50   108.72   1104 svchost                                                                    
    737      37    45608      58500 ...92    97.66    604 svchost                                                                    
    261      22    42228      57320 ...25    75.91   3664 dwm   

#Regular Expressions (REGEX)

#Following 3 will do the same thing.
$svcs= Get-Service
Get-Service -Outvariable svcs
New-Variable -Name svcs -Value (Get-Service)
$svcs #To Verify

Get-Help about_Regular_Expressions -ShowWindow

# $? - If Value = True it means that the last command ran successfully. False means error.
# Can be used as a loop trigger or through an If or while.

$Error[0] > Shows last error.
$MaximumErrorCount (Default is 256)
2..7 = Range > 2 3 4 5 6 7
3..9 = Range > 3 4 5 6 7 8 9
-10..0 = Negative Range

(Get-Content .\Desktop\Scripts\demo\config.txt) -match "\d(2,3)[1-6]\.\d{3}"

-ErrorAction SilentlyContinue // -ea sc (Default is Continue)
-WarningAction
"spooler" -clike "s*"
"word" -notlike "w*"

$ConfirmPreference > -Confirm

Modues Saved : $env:PSModulePath -Split ";"
`n is \n is Powershell however Split works for \n on `n.

"remove spaces put commas" -Replace " ", ","
"powerpoint" -Replace "point", "shell"

$a = "abc", "def", "test"
$a -Join " "

{} - Script Block // Given a name it becomes a function.
<Eg>

Function Top-Process (can be named anything, Verb-Noun not hard & fast)
{
Get-Process | Sort CPU -Descending | Select -First 5
}


Function Top-Process (can be named anything, Verb-Noun not hard & fast)
{
Param ($num) *
Get-Process | Sort CPU -Descending | Select -First $num
}

* Param ($num=5) to give a default value.
#Params make it more reusable, more dynamic

<Exec>
Top-Process -num 8 (Shows top 8 CPU consuming processes)

Multiple Params

$a=1
$a.GetType()
$a="abc"
$a.GetType()
$a=[int]"10" to force integer basically same class of values as input. If we enter 10.8 it will only accept 10 instead of the [Double] Value 10.8
[int]$a=10.8 to force Integer Only as Input.

(Get-Date).GetType()
[datetime]"10/10/2018" to force it into a DateTime Value #Topic : Weak Type vs Strong Type

# Accept Value from a User
$val = Read-Host "Enter a Value "

Single Quote doesn't translate a variable i.e. a literal string.
Double Quote (Expandable String) Examples


"Selected Service in use is $svc.name" - Gives Object Type/Category
"Selected Service in use is $($svc.name)" -Pass the wholething via $() to call for full value resolution.

Multi Line 
@' > '@
@" > "@

$string = @' or @"
x
y
z
$a
a
'@ or "@

[csv]$csv = Get-Content .\File.csv #Sometimes works better than Import-CSV
Datatypes are dependant on which .NET Assemblies are loaded into your session.

#Test Values
(Get-Date) -is [DateTime]
(Get-Date) -isnot [DateTime]
"10/10/2018" -as [DateTime]

# Reformatting Date
"{0:d-MMM-yyy}"-f (Get-Date)
23-Oct-2018

"{0:d-MMM-yyy}"-f (Get-Date), (Get-Date).AddDays(-5)
23-Oct-2018

"{1:d-MMM-yyy}"-f (Get-Date), (Get-Date).AddDays(-5)
18-Oct-2018

#Format Operator
Get-Help about_operators -ShowWindow

"{1}{0}{2}{0}{3}{0}{4}" -f "-","Text","separated","by","dash"
Text-separated-by-dash

"{1}{0,5}{2,-5}{0}{3}{0}{4}" -f "-","Text","separated","by","dash" #Alignment, Dash printed after 5 Spaces
Text    -separated-by-dash

#Using the -F format Operator
https://social.technet.microsoft.com/wiki/contents/articles/7855.powershell-using-the-f-format-operator.aspx

#More Complex Dynamics
"{0:ddd dd MMM hh:mm}"-f (Get-Date).AddDays(+1) #Excel Level Formatting
Wed 24 Oct 11:24
# $Date = "{0:ddd dd MMM hh:mm}"-f (Get-Date).AddDays(+1)

# REMOTING (WinRM) (-ComputerName uses WMI so no changes can be made remotely)
Prereq : Enable-PSRemoting
$Cred = Get-Credential
Get-Command –ParameterName ComputerName

$PSS = New-PSSession <hostname>
Enter-PSSession $PSS -Credential $Cred
$PSS.GetType()

Get-PSSession

LOCAL VARIABLE ON REMOTE SESSION (Define Scope via Using)
*****
$SList = "Srv1", "Srv2", "Srv3"
$num=5
$SB = {
Get-Service | Select -First $using:num
}
Invoke-Command $SList -ScriptBlock $SB

** For Function Using:<Function Name>

** STRUCTURING FUNCTIONS **

Function test-func
{
begin{Write-Host "begin $_" -ForegroundColor Cyan} #Connect DB, prepare & pass creds
process{Write-Host "process $_" -ForegroundColor Yellow}
end{Write-Host "end $_" -ForegroundColor Red} #Clean up creds, memory, connections
}

Output,
1..5 | test-func
begin (cyan)
process 1 (yellow
process 2
process 3
process 4
process 5
end 5

** If only passing Params in Begin & End then explicitly mentioning Begin/End can be omitted.

function My-Function
{
    Begin
    {
        Remove-Item .\Events.txt -ErrorAction SilentlyContinue
        Write-Host "Genesis" -ForegroundColor Cyan
    }
    Process
    {
        $_.Message | Out-File -Filepath Events.txt
    }
    End
    {
        Write-Host "End" -ForegroundColor DarkRed
        notepad.exe Events.txt
    }
}

# Resultant Command
Get-EventLog Application -Newest 5 | My-Function

# Structuring FOREACH
Get-Service |
 Foreach-Object –begin {"Counting Services..." ; $count=0} `
  –process {$count++} `
  –end {“$count services were found” }
  
----------------------------------------------------------------------------------------------------------------------------------------
DAY 3 (Modules 13 > 14 > 15 > 17) - Arrays, Hashtables, Loops (Flow Control)
----------------------------------------------------------------------------------------------------------------------------------------

@() Array
@{} Hashtable

Hashtable can be passed into a command as values required by the command.
$var = @{}
Verb-Noun @var ($ changes to @)

# Loops (Grouped by Interchangibility)

While     > Runs mandatorily under <condition> = $true
Do .. While  > Runs at least once without <condition> = %true
Do .. Until (reverse -not switch in While) > Runs till <condition> = $false

For (init; condition; increment/decrement)
ForEach > Built to enumerate.

Switch () > Runs through all listed conditions regardless for all lookup values mentioned in switch.
Default {} is used as Else ; Not MANDATORY to be defined.
If .. Else > Runs If till Else

foreach ($File in Get-ChildItem C:\temp -File) {$File}

########################################################################################################################################
Output Difference based off -Switch placement (Ref -Exact & -Wildcard) i.e. Resolves conflicts by last in line.
All Switches for "Switch" > -CaseSensitive -Wildcard -Exact -Regex -Parallel -File (PS 5.1)
$_ is better used to refere to the pipeline value in case of Switch base query value.
########################################################################################################################################

switch -CaseSensitive -Exact -Wildcard ("spooler")
{
"SPOOLER" {"Caps"}
"spooler" {"Not Caps"}
"s*" {"Wildcard"}
}

Not Caps
Wildcard

switch -CaseSensitive -Wildcard -Exact ("spooler")
{
"SPOOLER" {"Caps"}
"spooler" {"Not Caps"}
"s*" {"Wildcard"}
}

Not Caps # Doesn't show Wildcard this time.


***** MODULES *****

$env:PSModulePath -Split ";" #List of Module Paths
Get-Module // List of Loaded Modules
Get-Module -ListAvailable // List of All Modules
Import-Module * // Load All Modules
Get-Command -Noun Module // List All from Local Repository
Find-Module "*sql*" // Talks to PS Gallery Online and Lists all available.
Install-Module to Install directly from the Online PS Gallery.
Import-Module ActiveDirectory -PSSession $PSS // Import from Another Computer
Import-Module ActiveDirectory -PSSession $PSS -Prefix "DC" // Import from Another Computer

Export-ModuleMember -Function * -Alias * // Export Functions as well as their values into Current Session which are by default not loaded.

Find-Module "*vmware*"

Version    Name                                Repository           Description
-------    ----                                ----------           -----------
11.0.0.... VMware.VimAutomation.Core           PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Sdk            PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Common         PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Cis.Core       PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Vds            PSGallery            This Win...
10.0.0.... VMware.VimAutomation.License        PSGallery            This Win...
10.0.0.... VMware.VimAutomation.Srm            PSGallery            This Win...
10.0.0.... VMware.VimAutomation.vROps          PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Cloud          PSGallery            This Win...
6.7.0.8... VMware.ImageBuilder                 PSGallery            This Win...
7.6.0.1... VMware.VimAutomation.HorizonView    PSGallery            This Win...
6.5.4.7... VMware.VimAutomation.HA             PSGallery            This Win...
11.0.0.... VMware.PowerCLI                     PSGallery            This Win...
6.7.0.8... VMware.DeployAutomation             PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Storage        PSGallery            This Win...
10.0.0.... VMware.VimAutomation.PCloud         PSGallery            This Win...
6.5.1.7... VMware.VumAutomation                PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Nsxt           PSGallery            This Win...
1.3.0.0    VMware.VimAutomation.StorageUtility PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Vmc            PSGallery            This Win...
6.7.0.1... VMware.Vim                          PSGallery            This Win...
11.0.0.... VMware.VimAutomation.Security       PSGallery            This Win...
1.2.0      VMware.VMC                          PSGallery            PowerShe...
0.0.3      VMware.VimAutomation.Custom         PSGallery            This mod...
1.4.0      VMware-vCD-Module                   PSGallery            This a P...
0.1.1      VMwareBaselineCheck                 PSGallery            VMware B...
1.2.0      VMware-NSXvCD-Module                PSGallery            The VMwa...
0.1.1      Poshbot.VMware                      PSGallery            A PoshBo...
1.2.5      UMN-VMWareRA                        PSGallery            Powershe...
1.0.0.2    Cody.PureStorage.FlashArray.VMware  PSGallery            Pure Sto...


########################################################################################################################################

----------------------------------------------------------------------------------------------------------------------------------------
DAY 4 (Modules 16 > 10) Scope, Providers
----------------------------------------------------------------------------------------------------------------------------------------

- Execution Policy
- Scope // Function Global:Top-Process // Shortcut instead of '-Scope Global'
- Script Signing *** // <EG> Get-ChildItem Cert:\CurrentUser\CA
  - Has to be a "Code Signing Cert".
  - Does NOT invoke Access Control, just validates Authenticity of a script.
  - Change in even one single character after signing will throw Warnings. Resign all over again to get rid of that.

https://sid-500.com/2017/10/26/how-to-digitally-sign-powershell-scripts/
New-SelfSignedCertificate -DnsName patrick@sid-500.com -CertStoreLocation Cert:\CurrentUser\My\ -Type Codesigning
Set-AuthenticodeSignature -FilePath C:\Temp\script1.ps1 -Certificate (Get-ChildItem -Path Cert:\CurrentUser\My\ -CodeSigningCert)

- Dot Sourcing // Bypass Scope Factor // . Top-Process > Gets the variable value as well.
- Providers // Entry Points to Key & PS Specific Repositories required by ISE

Get-PSDrive // Powershell Drives
Providers create the corresponding Drive or Entry Point.

Built-In
Get-ChildItem Variable:

Name           Used (GB)     Free (GB) Provider      Root                                             CurrentLocation
----           ---------     --------- --------      ----                                             ---------------
Alias                                  Alias                                                                         
C                  33.43        431.84 FileSystem    C:\                                                  Users\Admin
Cert                                   Certificate   \                                                               
Env                                    Environment                                                                   
Function                               Function                                                                      
HKCU                                   Registry      HKEY_CURRENT_USER                                               
HKLM                                   Registry      HKEY_LOCAL_MACHINE                                              
Variable                               Variable                                                                      
WSMan                                  WSMan                                                                         

Get-ChildItem HKCU:\

    Hive: HKEY_CURRENT_USER


Name                           Property                                                                                              
----                           --------                                                                                              
AppEvents                                                                                                                            
AppXBackupContentType                                                                                                                
Console                        ColorTable00             : 0                                                                          
                               ColorTable01             : 8388608                                                                    
                               ColorTable02             : 32768                                                                      
                               ColorTable03             : 8421376                                                                    
                               ColorTable04             : 128                                                                        
                               ColorTable05             : 8388736                                                                    
                               ColorTable06             : 32896                                                                      
                               ColorTable07             : 12632256                                                                   
                               ColorTable08             : 8421504                                                                    
                               ColorTable09             : 16711680                                                                   
                               ColorTable10             : 65280                                                                      
                               ColorTable11             : 16776960                                                                   
                               ColorTable12             : 255                                                                        
                               ColorTable13             : 16711935                                                                   
                               ColorTable14             : 65535                                                                      
                               ColorTable15             : 16777215                                                                   
                               CtrlKeyShortcutsDisabled : 0                                                                          
                               CursorSize               : 25                                                                         
                               EnableColorSelection     : 0                                                                          
                               ExtendedEditKey          : 1                                                                          
                               ExtendedEditKeyCustom    : 0                                                                          
                               FaceName                 : __DefaultTTFont__                                                          
                               FilterOnPaste            : 1                                                                          
                               FontFamily               : 0                                                                          
                               FontSize                 : 1048576                                                                    
                               FontWeight               : 0                                                                          
                               ForceV2                  : 1                                                                          
                               FullScreen               : 0                                                                          
                               HistoryBufferSize        : 50                                                                         
                               HistoryNoDup             : 0                                                                          
                               InsertMode               : 1                                                                          
                               LineSelection            : 1                                                                          
                               LineWrap                 : 1                                                                          
                               LoadConIme               : 1                                                                          
                               NumberOfHistoryBuffers   : 4                                                                          
                               PopupColors              : 245                                                                        
                               QuickEdit                : 1                                                                          
                               ScreenBufferSize         : 589889656                                                                  
                               ScreenColors             : 7                                                                          
                               ScrollScale              : 1                                                                          
                               TrimLeadingZeros         : 0                                                                          
                               WindowAlpha              : 255                                                                        
                               WindowSize               : 1966200                                                                    
                               WordDelimiters           : 0                                                                          
Control Panel                                                                                                                        
Environment                    TEMP     : C:\Users\Admin\AppData\Local\Temp                                                          
                               TMP      : C:\Users\Admin\AppData\Local\Temp                                                          
                               OneDrive : C:\Users\Admin\OneDrive                                                                    
EUDC                                                                                                                                 
Keyboard Layout                                                                                                                      
Network                                                                                                                              
Printers                                                                                                                             
SOFTWARE                                                                                                                             
System                                                                                                                               
Volatile Environment           LOGONSERVER               : \\DESKTOP-MTF3GP3                                                         
                               USERDOMAIN                : DESKTOP-MTF3GP3                                                           
                               USERNAME                  : Admin                                                                     
                               USERPROFILE               : C:\Users\Admin                                                            
                               HOMEPATH                  : \Users\Admin                                                              
                               HOMEDRIVE                 : C:                                                                        
                               APPDATA                   : C:\Users\Admin\AppData\Roaming                                            
                               LOCALAPPDATA              : C:\Users\Admin\AppData\Local                                              
                               USERDOMAIN_ROAMINGPROFILE : DESKTOP-MTF3GP3                                                           

Get-Item HKCU:\Environment

    Hive: HKEY_CURRENT_USER


Name                           Property                                                                                              
----                           --------                                                                                              
Environment                    TEMP     : C:\Users\Admin\AppData\Local\Temp                                                          
                               TMP      : C:\Users\Admin\AppData\Local\Temp                                                          
                               OneDrive : C:\Users\Admin\OneDrive                 
                               
Get-ItemProperty HKCU:\Environment -Name OneDrive

OneDrive     : C:\Users\Admin\OneDrive
PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Environment
PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER
PSChildName  : Environment
PSDrive      : HKCU
PSProvider   : Microsoft.PowerShell.Core\Registry

(Get-ItemProperty HKCU:\Environment -Name OneDrive).OneDrive
C:\Users\Admin\OneDrive

Set-ItemProperty HKCU:\Environment -Name TestKey -Value 1 // Create or Edit Existing CANNOT SET TYPE
New-ItemProperty HKCU:\Environment -PropertyType QWORD -Value 2 -Name TestKey2 // Create Only; Can Set Type

TestKey2     : 2
PSPath       : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Environment
PSParentPath : Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER
PSChildName  : Environment
PSDrive      : HKCU
PSProvider   : Microsoft.PowerShell.Core\Registry

New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT

Name           Used (GB)     Free (GB) Provider      Root                                                             CurrentLocation
----           ---------     --------- --------      ----                                                             ---------------
HKCR                                   Registry      HKEY_CLASSES_ROOT                                                               


New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT
New-PSDrive -Name H -PSProvider FileSystem -Root \\2012R2-MS\Homeshare -Persist -Credential (Get-Credential Contose\DanPark)
Remove-PSDrive -Name HKCR

Item, ChildItem, ItemProperty - Can be used on PSDrives
ChildItem in terms of Registry will only list sub directories

Get-Command -Noun Item

CommandType     Name                                               Version    Source                                                 
-----------     ----                                               -------    ------                                                 
Cmdlet          Clear-Item
Cmdlet          Copy-Item
Cmdlet          Get-Item     // Get Target Item Details & Properties
Cmdlet          Invoke-Item  // Equivalent to Double-Click
Cmdlet          Move-Item
Cmdlet          New-Item
Cmdlet          Remove-Item
Cmdlet          Rename-Item
Cmdlet          Set-Item

Get-Command -Noun ItemProperty | Select CommandType,Name

CommandType Name               
----------- ----               
     Cmdlet Clear-ItemProperty 
     Cmdlet Copy-ItemProperty  // Destination Item has to exist as a mandate.
     Cmdlet Get-ItemProperty   
     Cmdlet Move-ItemProperty  
     Cmdlet New-ItemProperty   
     Cmdlet Remove-ItemProperty
     Cmdlet Rename-ItemProperty
     Cmdlet Set-ItemProperty   

New-Item HKCU:\Environment -Name TestKey -ItemType Directory // Reg Key

Clear-Content C:\Windows\Logs\bpa\Reports\* -Include 2013* -Exclude 2014*
Help Clear-Content -Parameter Include

-Include <String[]>
    Specifies, as a string array, content that this cmdlet clears. The value of this parameter qualifies the Path parameter. Enter a 
    path element or pattern, such as "*.txt". Wildcards are permitted.
    
    Required?                    false
    Position?                    named
    Default value                None
    Accept pipeline input?       False
    Accept wildcard characters?  false
    
Clear-Content -? // Default Help

*** Brush Up

HT Use Case 1 : To get data from multiple sources and then to form an object.
$HashTable["Role"] = xyz
%HashTable.Role = xyz
[PSCustomObject]$Hashtable

Use Case 2 :
Custom Properties @{l= ;e= }

Use Case 3 : Splatting; passing multile argments using HT.

-><-

-eq      - looks for Exact // -ceq is Case Sensitive
-like    - accepts Wildcards
-match   - accepts REGEX

-><-

Input - Get-Commands
Process - Select, Where, Sort, Group, Measure, Compare, ForEach
Output - Format-(List, Table, Wide), Export-(csv, clixml)

$_ can be given name by -PipelineVariable

Data Types

[int]$a = 10 // Accepts only Integers into target variable
$a = [int]10 // Attempts to convert input value into target data type and then casts it into the variable.

----------------------------------------------------------------------------------------------------------------------------------------
-><-

Get-WMIObject
Get-CIMInstance (Win 8.1 onwards)

(Get-Ciminstance -class Win32_ComputerSystem).DomainRole
(Get-WMIObject -class Win32_ComputerSystem).DomainRole

Class/Object Ref : https://docs.microsoft.com/en-us/windows/desktop/CIMWin32Prov/win32-computersystem

Reference,
0 (0x0)  Standalone Workstation 
1 (0x1)  Member Workstation
2 (0x2)  Standalone Server
3 (0x3)  Member Server
4 (0x4)  Backup Domain Controller
5 (0x5)  Primary Domain Controller

Books (URL for Added Discount),
https://www.amazon.com/gp/product/1449320686/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&tag=whatpixel-20&camp=1789&creative=9325&linkCode=as2&creativeASIN=1449320686&linkId=8c0e9c85fd23b219ca218c109af28045

################################################################
#                Meaningful Problems in Class                  #
################################################################
Task : Create new Function “Filter-Service” and have Computer Name as Parameter. Get List of Services and feed Running ones into Running.txt and Stopped ones into Stopped.txt.
Mention Count of Running & Stopped Services at the end.

$Function:Pause
Read-Host 'Press Enter to continue...' | Out-Null
cd Function:

My Solution (there are at least a dozen other ways of getting it done)

Function Filter-Service ($Computer=$env:COMPUTERNAME)
{
Remove-Item .\Running.txt -ErrorAction SilentlyContinue
Remove-Item .\Stopped.txt -ErrorAction SilentlyContinue
ForEach ($Service in Get-Service){
If ($Service.Status -eq "Running")
{
$Service.DisplayName >> .\Running.txt
}
Else
{
$Service.DisplayName >> .\Stopped.txt
}
}
$R = (Get-Content .\Running.txt).Count
$S = (Get-Content .\Stopped.txt).Count
Write-Host 'Started Services' $S
Write-Host 'Stopped Services' $R
}

- >< -

##### Compute & Structure Efficient Method w/ Begin-End, Switch & Empty Arrays

Function Filter-Service ($Computer=$env:COMPUTERNAME)
{
 
Begin {
$RS = @()
$SS = @()
$Running=0; $Stopped=0
}
 
Process {
Switch (Get-Service -ComputerName $Computer)
{
   {$_.Status -eq "running"} {
       $RS += $_.Name
       $Running++
       }
   {$_.Status -eq "stopped"} {
       $SS += $_.Name
       $Stopped++
       }
}
}
 
End {
$RS > .\Running.txt
$SS > .\Stopped.txt
 
Write-Host 'Started Services :' $Running -ForegroundColor Green # (Get-Content .\Running.txt).Count
Write-Host 'Stopped Services :' $Stopped -ForegroundColor Red   # (Get-Content .\Stopped.txt).Count
 
# Display To Screen
notepad.exe .\Running.txt; notepad.exe .\Stopped.txt
}
}

- >< -

$psISE

CurrentPowerShellTab         : Microsoft.PowerShell.Host.ISE.PowerShellTab
CurrentFile                  : Microsoft.PowerShell.Host.ISE.ISEFile
CurrentVisibleHorizontalTool : 
CurrentVisibleVerticalTool   : Microsoft.PowerShell.Host.ISE.ISEAddOnTool
Options                      : Microsoft.PowerShell.Host.ISE.ISEOptions
PowerShellTabs               : {PowerShell 1}

$psISE.CurrentPowerShellTab.AddOnsMenu.SubMenus.Add( ‘Bing It!’, { Start ‘http://www.bing.com.au’ }, ‘Control+Alt+1’ )

Action                           DisplayName Shortcut                        Submenus
------                           ----------- --------                        --------
 Start ‘http://www.bing.com.au’  Bing It!    System.Windows.Input.KeyGesture {}      

Option comes up in Add-Ons Menu.

$psISE.Options.ConsolePaneBackgroundColor=‘orange’
$psISE.Options.ConsolePaneTextBackgroundColor-'Orange'
$psISE.Options.RestoreDefaults()


DSC > https://docs.microsoft.com/en-us/powershell/dsc/configurations
________________________________________________________________________________________________________________________________________

<END>
