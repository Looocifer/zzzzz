DAY 1
----------------------------------------------------------------------------------------------------------------------------------------
Backtick (`) used to continue one command into the next line.

$PSVersionTable
$env:PSModulePath -Split ";"

#psm1 file extension is for Modules (Container for Commands)

Get-Command -Noun *net*
Get-Command -Verb *get*

Get-Module

Get-Help Get-ChildItem -ShowWindow
Get-Help Get-NetIPConfiguration -Parameter All
Get-Help Get-ChildItem -Online #Online Technet Article

Get-Command -Noun Alias
Get-Command *Alias
Get-Command New-Alias -Syntax
Get-Command Get-ChildItem -Syntax

New-Alias Child2 Get-ChildItem 
Get-Alias | findstr Child2

$profile
$profile | Select * #All Profiles (ISE or PS : C:\Users\prudentia\Documents\WindowsPowerShell\profile.ps1)

#Write-Host "User: $env:USERNAME"
#Use Transcript to record commands being run.

Set-ExecutionPolicy Unrestricted -Scope LocalMachine

Get-Command *transcript
Start-Transcript -Path $home\Desktop\TranscriptTest.txt -Append
Stop-Transcript

#Control Mechs // Risk Mitigation : WhatIf & Confirm
Stop-Process -name c* -WhatIf
Stop-Process -name c* -WhatIf:$true
Stop-Process -name c* -Confirm #Confirm Manually For Each Process

$ConfirmPreference

#For running in the background
Restart-Computer Machine1 -Confirm:$false

Update-Help -Verbose -Force -SourcePath C:\PowerShell-Help
?? - Get-Childitem $PSHome -Filter *helpinfo.xml -Recurse | Remove-Item Confirm:$false
Get-Help Get-Process -Full
Get-Help Get-NetAdapter -Examples
Get-Help about_Updatable_Help
Get-Help Save-Help -Examples

New-Item -Path C:\TheHelpFiles â€“ItemType Directory
Get-Module -ListAvailable | Format-Table Name, HelpInfoURI
Save-Help -Verbose -Force -DestinationPath C:\TheHelpFiles #Offline Dump of Existing Help Data

Update-Help -Verbose #Delay between two update calls is 24 hrs.
Update-Help -Verbose -Force

Get-Process -Id $pid -Module
Get-Process -Id $pid -Verbose
#F7
Get-History
#GUI Fill & Exec
Show-Command Get-Process 

Show-Command Get-Process -PassThru -Outvariable result #Click OK on the Popup; PassThru is key.
$result | Invoke-Expression

Get-Process -Id $pid -Module

$a=1
$a.GetType()
$svc = Get-Service Spooler
$svc.GetType
$svc.GetHashCode()

$svc | select *
$svc.RequiredServices
(Get-Service Spooler).RequiredServices
$svc.Start()
$svc.StartType

#List All Props & Meths
$svc | Get-Member

 
(Get-Date).Date | Get-Member
(Get-Date).Date.Month | Get-Member
 
(Get-Date).ToShortDateString()

Get-Culture

Get-ChildItem -File
Get-ChildItem -Directory

Get-ChildItem -Path .. -File | where LastWriteTime -lt (Get-Date).AddDays(-30) | Remove-Item -WhatIf

Get-ChildItem | Get-Member #Lists for ALL Object Types - In this case for Directories as well as File

"spooler", "bits" | Get-Service
Get-Content <File> | Get-Service | where StartType -eq manual
Get-Content <File> | Get-Service

$var = Get-Content <File>
$var = Get-Content <File> | Get-Service | where StartType -eq manual
$var[0] #Picking Up First Entry from the Variable

#Specifics (Get-Content will not consider comma as a delimiter; default is \n)
Import-CSV

$gc= Get-Content <file>
$gc[0]
$gc= Get-Content <file> -Delimiter " " #Still doesn't treat dataset as a table, the break is translated as a new line.

$csv= Import-Csv <file>
$csv[0]
$csv= Import-Csv <file> -Delimiter ":" #Explicitly define Delimiter

## Functions/Processes for Input i.e. Verb-Noun cmdlets. ##
(Select, Sort, Group, Measure, Compare, Where, Foreach, etc)

Get-Service | Select-Object StartType, Name, Status, DisplayName -First 5 #Reminder : Know Props via Get-Member
Get-Process | Sort CPU -Descending | Select -First 5
Get-EventLog -LogName Application | Select -Last 5

#Grouping
Get-EventLog -LogName Application | Group-Object EntryType
Get-Service | Group Status

#Check Difference in Output by running the following
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error" | Select -ExpandProperty Group | Select -First 5
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error"  | Select -First 5

#Newest (Only in some cmdlets)
Get-EventLog -LogName Application -EntryType Error -Newest 10

#Measure
Get-ChildItem -Path . -File | Measure -Property Length -Sum -Average -Maximum -Minimum
Get-Process | Measure -Property CPU -Sum -Average -Maximum -Minimum

#Compare <= == =>
$Proc1 = Get-Process
start notepad.exe
calc
$Proc2 = Get-Process
Compare $Proc1 $Proc2
Compare $Proc1 $Proc2 -IncludeEqual -ExcludeDifferent

#Actual
Compare-Object -ReferenceObject $Proc1 -DifferenceObject $Proc2

#Where
Get-EventLog Application -Newest 10 | Where-Object {$_.Source -eq "esent" -and $_.TimeGenerated -gt (Get-Date).AddDays(-1)}
#$_ is Pipeline Variable (i.e. acts on output objects of the current command)

** Question Mark (?) is Alias for Where or Where-Object
** Percentage (%) is Alias for ForEach or ForEach-Object

Get-Process | Where CPU -gt 100 (Won't work till PS3)
Ideal one,
Get-Process | Where-Object {$_.CPU -gt 100}
Get-Process | Where-Object {$_.CPU -gt 100 -and $_.NonpagedSystemMemorySize -gt 10kb} #By default values are in Bytes

