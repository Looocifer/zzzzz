DAY 1 (Modules 2 > 6 > 3 > 7)
----------------------------------------------------------------------------------------------------------------------------------------
Backtick (`) used to continue one command into the next line.

$PSVersionTable
$env:PSModulePath -Split ";"

#psm1 file extension is for Modules (Container for Commands)

Get-Command -Noun *net*
Get-Command -Verb *get*

Get-Module

Get-Help Get-ChildItem -ShowWindow
Get-Help Get-NetIPConfiguration -Parameter All
Get-Help Get-ChildItem -Online #Online Technet Article

Get-Help Sort-Object -Parameter Descending #Describes DESC function

Get-Command -Noun Alias
Get-Command *Alias
Get-Command New-Alias -Syntax
Get-Command Get-ChildItem -Syntax

New-Alias Child2 Get-ChildItem 
Get-Alias | findstr Child2

$profile
$profile | Select * #All Profiles (ISE or PS : C:\Users\prudentia\Documents\WindowsPowerShell\profile.ps1)

#Write-Host "User: $env:USERNAME"
#Use Transcript to record commands being run.

Set-ExecutionPolicy Unrestricted -Scope LocalMachine

Get-Command *transcript
Start-Transcript -Path $home\Desktop\TranscriptTest.txt -Append
Stop-Transcript

#Control Mechs // Risk Mitigation : WhatIf & Confirm
Stop-Process -name c* -WhatIf
Stop-Process -name c* -WhatIf:$true
Stop-Process -name c* -Confirm #Confirm Manually For Each Process

$ConfirmPreference

#For running in the background
Restart-Computer Machine1 -Confirm:$false

Update-Help -Verbose -Force -SourcePath C:\PowerShell-Help
?? - Get-Childitem $PSHome -Filter *helpinfo.xml -Recurse | Remove-Item Confirm:$false
Get-Help Get-Process -Full
Get-Help Get-NetAdapter -Examples
Get-Help about_Updatable_Help
Get-Help Save-Help -Examples

New-Item -Path C:\TheHelpFiles –ItemType Directory
Get-Module -ListAvailable | Format-Table Name, HelpInfoURI
Save-Help -Verbose -Force -DestinationPath C:\TheHelpFiles #Offline Dump of Existing Help Data

Update-Help -Verbose #Delay between two update calls is 24 hrs.
Update-Help -Verbose -Force

#GREP
ipconfig /all | Select-String -Pattern ‘Ipv4 Address’

Get-Process -Id $pid -Module
Get-Process -Id $pid -Verbose
#F7
Get-History
#GUI Fill & Exec
Show-Command Get-Process 

Show-Command Get-Process -PassThru -Outvariable result #Click OK on the Popup; PassThru is key.
$result | Invoke-Expression

Get-Process -Id $pid -Module

$a=1
$a.GetType()
$svc = Get-Service Spooler
$svc.GetType
$svc.GetHashCode()

$svc | select *
$svc.RequiredServices
(Get-Service Spooler).RequiredServices
$svc.Start()
$svc.StartType

#List All Props & Meths
$svc | Get-Member

(Get-Date).Date | Get-Member
(Get-Date).Date.Month | Get-Member
 
(Get-Date).ToShortDateString()

Get-Culture

Get-ChildItem -File
Get-ChildItem -Directory

Get-ChildItem -Path .. -File | where LastWriteTime -lt (Get-Date).AddDays(-30) | Remove-Item -WhatIf

Get-ChildItem | Get-Member #Lists for ALL Object Types - In this case for Directories as well as File

"spooler", "bits" | Get-Service
Get-Content <File> | Get-Service | where StartType -eq manual
Get-Content <File> | Get-Service

$var = Get-Content <File>
$var = Get-Content <File> | Get-Service | where StartType -eq manual
$var[0] #Picking Up First Entry from the Variable

#Specifics (Get-Content will not consider comma as a delimiter; default is \n)
Import-CSV

$gc= Get-Content <file>
$gc[0]
$gc= Get-Content <file> -Delimiter " " #Still doesn't treat dataset as a table, the break is translated as a new line.

$csv= Import-Csv <file>
$csv[0]
$csv= Import-Csv <file> -Delimiter ":" #Explicitly define Delimiter

## Functions/Processes for Input i.e. Verb-Noun cmdlets. ##
(Select, Sort, Group, Measure, Compare, Where, Foreach, etc)

Get-Service | Select-Object StartType, Name, Status, DisplayName -First 5 #Reminder : Know Props via Get-Member
Get-Process | Sort CPU -Descending | Select -First 5
Get-EventLog -LogName Application | Select -Last 5

#Logical Disk
Get-Volume | Sort-Object –Property SizeRemaining

#Grouping
Get-EventLog -LogName Application | Group-Object EntryType
Get-Service | Group Status

#Check Difference in Output by running the following
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error" | Select -ExpandProperty Group | Select -First 5
Get-EventLog -LogName Application | Group-Object EntryType | Where Name -eq "error"  | Select -First 5

#Newest (Only in some cmdlets)
Get-EventLog -LogName Application -EntryType Error -Newest 10

#Measure
Get-ChildItem -Path . -File | Measure -Property Length -Sum -Average -Maximum -Minimum
Get-Process | Measure -Property CPU -Sum -Average -Maximum -Minimum

#Compare <= == =>
$Proc1 = Get-Process
start notepad.exe
calc
$Proc2 = Get-Process
Compare $Proc1 $Proc2
Compare $Proc1 $Proc2 -IncludeEqual -ExcludeDifferent

#Actual
Compare-Object -ReferenceObject $Proc1 -DifferenceObject $Proc2

#Where
Get-EventLog Application -Newest 10 | Where-Object {$_.Source -eq "esent" -and $_.TimeGenerated -gt (Get-Date).AddDays(-1)}
#$_ is Pipeline Variable (i.e. acts on output objects of the current command)

** Question Mark (?) is Alias for Where or Where-Object
** Percentage (%) is Alias for ForEach or ForEach-Object

Get-Process | Where CPU -gt 100 (Won't work till PS3)
Ideal one,
Get-Process | Where-Object {$_.CPU -gt 100}
Get-Process | Where-Object {$_.CPU -gt 100 -and $_.NonpagedSystemMemorySize -gt 10kb} #By default values are in Bytes

PS C:\Windows\system32> ((gci -File).length)/1024
4.009765625
PS C:\Windows\system32> ((gci -File).length)/1KB
4.009765625
PS C:\Windows\system32> ((gci -File).length)/1024/1024
0.00391578674316406
PS C:\Windows\system32> ((gci -File).length)/1MB
0.00391578674316406

#ForEach
Get-Service s* | Where Status -eq "Running" | ForEach {Write-Host "Service" $_.DisplayName "is running"}

Get-SmbShare | Sort-Object –Property Description # CMD : net share
Get-Process | Select-Object -Unique #Useful

#Correct Logically
Get-Process | Sort CPU -Descending | Select -First 5
#Incorrect Logically
Get-Process | Select -First 5 | Sort CPU -Descending

##Output
Out-File (Sends only whatever is on screen)
Export-CSV (Sends all properties regardless of what is printed on screen; similar to Select *. Also lists Object Type Information. Use -NoTypeInformation or -nti to avoid that.)
Export-Clixml

Get-Process | Select -First 5 | Sort CPU -Descending | Export-Csv .\test.csv -NoTypeInformation
Get-Process | Select -First 5 | Sort CPU -Descending | Out-File .\test.txt

Get-Command -Verb Out
Cmdlet          Out-Default                                        3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-File                                           3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-GridView                                       3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-Host                                           3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-Null                                           3.0.0.0    Microsoft.PowerShell.Core                                                                              
Cmdlet          Out-Printer                                        3.1.0.0    Microsoft.PowerShell.Utility                                                                           
Cmdlet          Out-String                                         3.1.0.0    Microsoft.PowerShell.Utility 

Out-Null

-NoClobber basically doesn't fill in duplicate data while appending.

Get-Process | Select -First 5 | Sort CPU -Descending | Out-GridView -PassThru
#PassThru provides OK & Cancel options to be printed back to screen based on whatever the end user has selected.

----------------------------------------------------------------------------------------------------------------------------------------
Export -Csv
       -Clixml

Out    -Default (is default)
       -File
       -Gridview
       -Host
       -Null (Use this to destroy value)
       -String (Cannot be converted back into an Object)
       -Printer
       
Format -Table
       -List
       -Wide
----------------------------------------------------------------------------------------------------------------------------------------

#Formatting (List/Table)
#Instead of Select * | FL, FL * can be used.

***** FL or FT should always be the last part of the pipeline and only to view on the screen.
Reason being these two convert data into strings i.e. without object property.

#Wrap
| FT -Wrap to remove the dot-dot-dots or Incomplete Output Data
For Outputs where one Column has longer values (eg. Path), keep it to the right otherwise some of the 

Get-Alias | Format-Wide -Autosize (Minimalistic)

Get-Process | Sort-Object -Property BasePriority | Format-Table -GroupBy BasePriority -Wrap -AutoSize
Get-Process | Sort-Object -Property BasePriority -Descending | Format-Table -GroupBy BasePriority -Wrap -AutoSize #With DESC

Get-Process | Sort-Object -Property Status | Format-Table -GroupBy Status -Wrap -AutoSize #Useful
Get-ACL Test.txt -Audit | Export-Clixml Text.xml #Useful
Example Output,
----------------------------------------------------------------------------------------------------------------------------------------
<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>System.Security.AccessControl.FileSecurity</T>
      <T>System.Security.AccessControl.FileSystemSecurity</T>
      <T>System.Security.AccessControl.NativeObjectSecurity</T>
      <T>System.Security.AccessControl.CommonObjectSecurity</T>
      <T>System.Security.AccessControl.ObjectSecurity</T>
      <T>System.Object</T>
    </TN>
    <ToString>System.Security.AccessControl.FileSecurity</ToString>
    <Props>
      <S N="AccessRightType">System.Security.AccessControl.FileSystemRights</S>
      <S N="AccessRuleType">System.Security.AccessControl.FileSystemAccessRule</S>
      <S N="AuditRuleType">System.Security.AccessControl.FileSystemAuditRule</S>
      <B N="AreAccessRulesProtected">false</B>
      <B N="AreAuditRulesProtected">false</B>
      <B N="AreAccessRulesCanonical">true</B>
      <B N="AreAuditRulesCanonical">true</B>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop\Test.txt</S>
      <S N="PSParentPath">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop</S>
      <S N="PSChildName">Test.txt</S>
      <Obj N="PSDrive" RefId="1">
        <TN RefId="1">
          <T>System.Management.Automation.PSDriveInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>C</ToString>
        <Props>
          <S N="CurrentLocation">Users\prudentia\Desktop</S>
          <S N="Name">C</S>
          <S N="Provider">Microsoft.PowerShell.Core\FileSystem</S>
          <S N="Root">C:\</S>
          <S N="Description"></S>
          <Nil N="MaximumSize" />
          <Obj N="Credential" RefId="2">
            <TN RefId="2">
              <T>System.Management.Automation.PSCredential</T>
              <T>System.Object</T>
            </TN>
            <ToString>System.Management.Automation.PSCredential</ToString>
            <Props>
              <Nil N="UserName" />
              <Nil N="Password" />
            </Props>
          </Obj>
          <Nil N="DisplayRoot" />
        </Props>
        <MS>
          <U64 N="Used">36568629248</U64>
          <U64 N="Free">463012818944</U64>
        </MS>
      </Obj>
      <Obj N="PSProvider" RefId="3">
        <TN RefId="3">
          <T>System.Management.Automation.ProviderInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>Microsoft.PowerShell.Core\FileSystem</ToString>
        <Props>
          <S N="ImplementingType">Microsoft.PowerShell.Commands.FileSystemProvider</S>
          <S N="HelpFile">System.Management.Automation.dll-Help.xml</S>
          <S N="Name">FileSystem</S>
          <S N="PSSnapIn">Microsoft.PowerShell.Core</S>
          <S N="ModuleName">Microsoft.PowerShell.Core</S>
          <Nil N="Module" />
          <S N="Description"></S>
          <S N="Capabilities">Filter, ShouldProcess, Credentials</S>
          <S N="Home">C:\Users\prudentia</S>
          <Obj N="Drives" RefId="4">
            <TN RefId="4">
              <T>System.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSDriveInfo, System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <LST>
              <Ref RefId="1" />
            </LST>
          </Obj>
        </Props>
      </Obj>
      <Obj N="Audit" RefId="5">
        <TN RefId="5">
          <T>System.Security.AccessControl.AuthorizationRuleCollection</T>
          <T>System.Collections.ReadOnlyCollectionBase</T>
          <T>System.Object</T>
        </TN>
        <IE />
        <Props>
          <I32 N="Count">0</I32>
          <S N="SyncRoot">System.Object</S>
          <B N="IsSynchronized">false</B>
        </Props>
      </Obj>
      <Nil N="CentralAccessPolicyId" />
      <Nil N="CentralAccessPolicyName" />
      <S N="Path">Microsoft.PowerShell.Core\FileSystem::C:\Users\prudentia\Desktop\Test.txt</S>
      <S N="Owner">DESKTOP-NOMDDPJ\prudentia</S>
      <S N="Group">DESKTOP-NOMDDPJ\None</S>
      <Obj N="Access" RefId="6">
        <TNRef RefId="5" />
        <IE>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
          <S>System.Security.AccessControl.FileSystemAccessRule</S>
        </IE>
      </Obj>
      <S N="Sddl">O:S-1-5-21-1304635577-3799697455-2161510296-1003G:S-1-5-21-1304635577-3799697455-2161510296-513D:(A;;FA;;;SY)(A;;FA;;;BA)(A;;FA;;;S-1-5-21-1304635577-3799697455-2161510296-1003)</S>
      <S N="AccessToString">NT AUTHORITY\SYSTEM Allow  FullControl_x000A_BUILTIN\Administrators Allow  FullControl_x000A_DESKTOP-NOMDDPJ\prudentia Allow  FullControl</S>
      <S N="AuditToString"></S>
    </MS>
  </Obj>
</Objs>
----------------------------------------------------------------------------------------------------------------------------------------

-x-
